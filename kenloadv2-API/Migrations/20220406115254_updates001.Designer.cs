// <auto-generated />
using System;
using KenloadV2API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KenloadV2API.Migrations
{
    [DbContext(typeof(Kenloadv2Data))]
    [Migration("20220406115254_updates001")]
    partial class updates001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("KenloadV2API.Models.AVWdemeritPoints", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("category")
                        .HasColumnType("int");

                    b.Property<int>("point")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("AVWdemeritPoints");
                });

            modelBuilder.Entity("KenloadV2API.Models.AVWoverloadCharges", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("overloadkg")
                        .HasColumnType("int");

                    b.Property<string>("period")
                        .HasColumnType("longtext");

                    b.Property<double>("singledriveaxle")
                        .HasColumnType("double");

                    b.Property<double>("steeringaxle")
                        .HasColumnType("double");

                    b.Property<double>("tandemaxle")
                        .HasColumnType("double");

                    b.Property<double>("tridemaxle")
                        .HasColumnType("double");

                    b.HasKey("id");

                    b.ToTable("AVWoverloadCharges");
                });

            modelBuilder.Entity("KenloadV2API.Models.AccessControlPasswords", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("acp_pass")
                        .HasColumnType("longtext");

                    b.Property<string>("level")
                        .HasColumnType("longtext");

                    b.Property<int>("screenid")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("AccessControlPasswords");
                });

            modelBuilder.Entity("KenloadV2API.Models.AccessPassPolicy", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("app_capital")
                        .HasColumnType("int");

                    b.Property<int>("app_char")
                        .HasColumnType("int");

                    b.Property<int>("app_day_exp")
                        .HasColumnType("int");

                    b.Property<int>("app_logoff_period")
                        .HasColumnType("int");

                    b.Property<int>("app_min_char")
                        .HasColumnType("int");

                    b.Property<int>("app_numbers")
                        .HasColumnType("int");

                    b.Property<int>("app_small")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("AccessPassPolicy");
                });

            modelBuilder.Entity("KenloadV2API.Models.AuditLogs", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("application")
                        .HasColumnType("longtext");

                    b.Property<string>("computer")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("details")
                        .HasColumnType("longtext");

                    b.Property<string>("useremail")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("KenloadV2API.Models.AutoWeigh", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("anpr")
                        .HasColumnType("longtext");

                    b.Property<string>("anprb")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("autodatetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("autostatus")
                        .HasColumnType("longtext");

                    b.Property<string>("autouser")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("autoweighbridge")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("deck1")
                        .HasColumnType("double");

                    b.Property<double>("deck2")
                        .HasColumnType("double");

                    b.Property<double>("deck3")
                        .HasColumnType("double");

                    b.Property<double>("deck4")
                        .HasColumnType("double");

                    b.Property<double>("gvw")
                        .HasColumnType("double");

                    b.Property<string>("ipaddress")
                        .HasColumnType("longtext");

                    b.Property<string>("wbt_no")
                        .HasColumnType("longtext");

                    b.Property<string>("wbtno")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("AutoWeigh");
                });

            modelBuilder.Entity("KenloadV2API.Models.AxleWeightConfig", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("axle_camea")
                        .HasColumnType("longtext");

                    b.Property<string>("axle_code")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("axle_name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("axle_number")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("AxleWeightConfig");
                });

            modelBuilder.Entity("KenloadV2API.Models.AxleWeightXreff", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("axle_code")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("axle_code2")
                        .HasColumnType("int");

                    b.Property<string>("axle_deckgrouping")
                        .HasColumnType("longtext");

                    b.Property<string>("axle_group")
                        .HasColumnType("longtext");

                    b.Property<string>("axle_grouping")
                        .HasColumnType("longtext");

                    b.Property<double>("axle_legalweight")
                        .HasColumnType("double");

                    b.Property<string>("axle_typeoftyres")
                        .HasColumnType("longtext");

                    b.Property<string>("cameawim")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("AxleWeightXreff");
                });

            modelBuilder.Entity("KenloadV2API.Models.AxleWeights", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("axle_actualweight")
                        .HasColumnType("double");

                    b.Property<string>("axle_group")
                        .HasColumnType("longtext");

                    b.Property<string>("axle_grouping")
                        .HasColumnType("longtext");

                    b.Property<int>("axle_number")
                        .HasColumnType("int");

                    b.Property<double>("axle_permissibleweight")
                        .HasColumnType("double");

                    b.Property<DateTime>("axle_time")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("axle_variantweight")
                        .HasColumnType("double");

                    b.Property<double>("fee")
                        .HasColumnType("double");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("wbrg_ticket_no")
                        .HasColumnType("longtext");

                    b.Property<int>("weighbridgetransactionsid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("AxleWeights");
                });

            modelBuilder.Entity("KenloadV2API.Models.BackUpDB", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("backup_delete")
                        .HasColumnType("int");

                    b.Property<string>("backup_name")
                        .HasColumnType("longtext");

                    b.Property<string>("backup_path")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("backup_time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("dayoftheweek")
                        .HasColumnType("longtext");

                    b.Property<string>("fullincr")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("BackUpDB");
                });

            modelBuilder.Entity("KenloadV2API.Models.BackupLogs", b =>
                {
                    b.Property<string>("backuptype")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("daysofweek")
                        .HasColumnType("longtext");

                    b.Property<string>("filename")
                        .HasColumnType("longtext");

                    b.Property<string>("folderpath")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("backuptype");

                    b.ToTable("BackupLogs");
                });

            modelBuilder.Entity("KenloadV2API.Models.Backups", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("backupName")
                        .HasColumnType("longtext");

                    b.Property<string>("bkPath")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Backups");
                });

            modelBuilder.Entity("KenloadV2API.Models.BillingInstruction", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("absconding")
                        .HasColumnType("int");

                    b.Property<DateTime?>("abscondingdatetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("billingfrom")
                        .HasColumnType("longtext");

                    b.Property<string>("billingid")
                        .HasColumnType("longtext");

                    b.Property<string>("billingto")
                        .HasColumnType("longtext");

                    b.Property<int>("casedetailsid")
                        .HasColumnType("int");

                    b.Property<string>("caseid")
                        .HasColumnType("longtext");

                    b.Property<string>("createdby")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("deleted")
                        .HasColumnType("int");

                    b.Property<string>("deletedby")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("deleteddatetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("otherdetails")
                        .HasColumnType("longtext");

                    b.Property<int>("others")
                        .HasColumnType("int");

                    b.Property<int>("overload")
                        .HasColumnType("int");

                    b.Property<int>("parking")
                        .HasColumnType("int");

                    b.Property<DateTime?>("parkingfromdatetime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("parkingtodatetime")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("payableamount")
                        .HasColumnType("double");

                    b.Property<DateTime?>("timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("verifiedby")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("verifieddatetime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("casedetailsid");

                    b.ToTable("BillingInstruction");
                });

            modelBuilder.Entity("KenloadV2API.Models.CalibrationCert", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("expiry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("issued")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("station")
                        .HasColumnType("longtext");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.Property<string>("userid")
                        .HasColumnType("longtext");

                    b.Property<string>("weighbridge")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("CalibrationCert");
                });

            modelBuilder.Entity("KenloadV2API.Models.Camera", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("cameraname")
                        .HasColumnType("longtext");

                    b.Property<string>("file")
                        .HasColumnType("longtext");

                    b.Property<string>("ipaddress")
                        .HasColumnType("longtext");

                    b.Property<int>("port")
                        .HasColumnType("int");

                    b.Property<string>("position")
                        .HasColumnType("longtext");

                    b.Property<string>("protocol")
                        .HasColumnType("longtext");

                    b.Property<string>("weighbridge")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Camera");
                });

            modelBuilder.Entity("KenloadV2API.Models.Cargo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("cargo_name")
                        .HasColumnType("longtext");

                    b.Property<string>("cargodetails")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Cargo");
                });

            modelBuilder.Entity("KenloadV2API.Models.CaseDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("WBT_operator")
                        .HasColumnType("longtext");

                    b.Property<string>("alongroad")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("casedatetime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("caseexcessload")
                        .HasColumnType("double");

                    b.Property<string>("caseid")
                        .HasColumnType("longtext");

                    b.Property<string>("caseregno")
                        .HasColumnType("longtext");

                    b.Property<string>("caseticket")
                        .HasColumnType("longtext");

                    b.Property<string>("chargedincourt")
                        .HasColumnType("longtext");

                    b.Property<string>("comppolice")
                        .HasColumnType("longtext");

                    b.Property<string>("county")
                        .HasColumnType("longtext");

                    b.Property<string>("court")
                        .HasColumnType("longtext");

                    b.Property<string>("createdby")
                        .HasColumnType("longtext");

                    b.Property<string>("district")
                        .HasColumnType("longtext");

                    b.Property<string>("dl")
                        .HasColumnType("longtext");

                    b.Property<string>("driveraddress")
                        .HasColumnType("longtext");

                    b.Property<int?>("driverage")
                        .HasColumnType("int");

                    b.Property<string>("drivergender")
                        .HasColumnType("longtext");

                    b.Property<string>("driverid")
                        .HasColumnType("longtext");

                    b.Property<string>("drivername")
                        .HasColumnType("longtext");

                    b.Property<string>("drivernationality")
                        .HasColumnType("longtext");

                    b.Property<string>("driverslicense")
                        .HasColumnType("longtext");

                    b.Property<string>("driversurname")
                        .HasColumnType("longtext");

                    b.Property<string>("editedby")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("editeddate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("movevehicleto")
                        .HasColumnType("longtext");

                    b.Property<string>("offloadreg")
                        .HasColumnType("longtext");

                    b.Property<string>("owneraddress")
                        .HasColumnType("longtext");

                    b.Property<int?>("ownerage")
                        .HasColumnType("int");

                    b.Property<string>("ownergender")
                        .HasColumnType("longtext");

                    b.Property<string>("ownerid")
                        .HasColumnType("longtext");

                    b.Property<string>("ownername")
                        .HasColumnType("longtext");

                    b.Property<string>("ownernationality")
                        .HasColumnType("longtext");

                    b.Property<string>("ownersurname")
                        .HasColumnType("longtext");

                    b.Property<string>("prohibitionorder")
                        .HasColumnType("longtext");

                    b.Property<string>("repairsneeded")
                        .HasColumnType("longtext");

                    b.Property<string>("repeatedoffence")
                        .HasColumnType("longtext");

                    b.Property<string>("station")
                        .HasColumnType("longtext");

                    b.Property<string>("ticketaxletype")
                        .HasColumnType("longtext");

                    b.Property<string>("tickettransporter")
                        .HasColumnType("longtext");

                    b.Property<string>("trafficofficer")
                        .HasColumnType("longtext");

                    b.Property<string>("transporteradd")
                        .HasColumnType("longtext");

                    b.Property<string>("transportername")
                        .HasColumnType("longtext");

                    b.Property<string>("transporterno")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicleins")
                        .HasColumnType("longtext");

                    b.Property<string>("vehiclemake")
                        .HasColumnType("longtext");

                    b.Property<string>("weighbrige")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("weighdate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("CaseDetails");
                });

            modelBuilder.Entity("KenloadV2API.Models.CaseDocs", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("cancelled")
                        .HasColumnType("longtext");

                    b.Property<string>("cancelledby")
                        .HasColumnType("longtext");

                    b.Property<int>("casedetailsid")
                        .HasColumnType("int");

                    b.Property<string>("casedocid")
                        .HasColumnType("longtext");

                    b.Property<string>("caseid")
                        .HasColumnType("longtext");

                    b.Property<string>("createdby")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("docdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("docname")
                        .HasColumnType("longtext");

                    b.Property<string>("editedy")
                        .HasColumnType("longtext");

                    b.Property<string>("poorder")
                        .HasColumnType("longtext");

                    b.Property<string>("printed")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("casedetailsid");

                    b.ToTable("CaseDocs");
                });

            modelBuilder.Entity("KenloadV2API.Models.CaseResults", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("casebasis")
                        .HasColumnType("longtext");

                    b.Property<int>("casedetailsid")
                        .HasColumnType("int");

                    b.Property<string>("caseid")
                        .HasColumnType("longtext");

                    b.Property<string>("casereid")
                        .HasColumnType("longtext");

                    b.Property<string>("casereregno")
                        .HasColumnType("longtext");

                    b.Property<string>("casereticketno")
                        .HasColumnType("longtext");

                    b.Property<string>("createdby")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("deleted")
                        .HasColumnType("int");

                    b.Property<string>("deletedby")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("deleteddatetime")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("drivercharge")
                        .HasColumnType("double");

                    b.Property<double?>("loadercharge")
                        .HasColumnType("double");

                    b.Property<double?>("ownercharge")
                        .HasColumnType("double");

                    b.Property<double?>("parkingfee")
                        .HasColumnType("double");

                    b.Property<string>("reason")
                        .HasColumnType("longtext");

                    b.Property<string>("receiptno")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("transportercharge")
                        .HasColumnType("double");

                    b.HasKey("id");

                    b.HasIndex("casedetailsid");

                    b.ToTable("CaseResults");
                });

            modelBuilder.Entity("KenloadV2API.Models.Census", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("buses")
                        .HasColumnType("int");

                    b.Property<string>("censusid")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("deletestatus")
                        .HasColumnType("int");

                    b.Property<string>("hour")
                        .HasColumnType("longtext");

                    b.Property<string>("route")
                        .HasColumnType("longtext");

                    b.Property<string>("shift")
                        .HasColumnType("longtext");

                    b.Property<string>("station")
                        .HasColumnType("longtext");

                    b.Property<int>("truck357t")
                        .HasColumnType("int");

                    b.Property<int>("truck7t")
                        .HasColumnType("int");

                    b.Property<string>("userid")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Census");
                });

            modelBuilder.Entity("KenloadV2API.Models.ClusterWeighbridge", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("cluster_code")
                        .HasColumnType("longtext");

                    b.Property<string>("cluster_name")
                        .HasColumnType("longtext");

                    b.Property<string>("prefix")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("ClusterWeighbridges");
                });

            modelBuilder.Entity("KenloadV2API.Models.ControlSelection", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("controlid")
                        .HasColumnType("int");

                    b.Property<int>("roleid")
                        .HasColumnType("int");

                    b.Property<int>("select")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("ControlSelections");
                });

            modelBuilder.Entity("KenloadV2API.Models.DataExchange", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("client_address")
                        .HasColumnType("longtext");

                    b.Property<string>("client_email")
                        .HasColumnType("longtext");

                    b.Property<string>("client_password")
                        .HasColumnType("longtext");

                    b.Property<string>("connectionType")
                        .HasColumnType("longtext");

                    b.Property<string>("server_address")
                        .HasColumnType("longtext");

                    b.Property<string>("server_email")
                        .HasColumnType("longtext");

                    b.Property<string>("server_password")
                        .HasColumnType("longtext");

                    b.Property<int>("server_port")
                        .HasColumnType("int");

                    b.Property<int>("tags")
                        .HasColumnType("int");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("weighbridgetickets")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("DataExchange");
                });

            modelBuilder.Entity("KenloadV2API.Models.DeckWeights", b =>
                {
                    b.Property<string>("wbrg_name")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("deck_1")
                        .HasColumnType("double");

                    b.Property<double>("deck_2")
                        .HasColumnType("double");

                    b.Property<double>("deck_3")
                        .HasColumnType("double");

                    b.Property<double>("deck_4")
                        .HasColumnType("double");

                    b.Property<double>("total")
                        .HasColumnType("double");

                    b.HasKey("wbrg_name");

                    b.ToTable("DeckWeights");
                });

            modelBuilder.Entity("KenloadV2API.Models.Destination", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("deletedstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("destination_name")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Destination");
                });

            modelBuilder.Entity("KenloadV2API.Models.DollarRate", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("rate")
                        .HasColumnType("double");

                    b.Property<string>("username")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("DollarRate");
                });

            modelBuilder.Entity("KenloadV2API.Models.Driver", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("driver_age")
                        .HasColumnType("int");

                    b.Property<string>("driver_contact")
                        .HasColumnType("longtext");

                    b.Property<bool>("driver_deletedstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("driver_dob")
                        .HasColumnType("longtext");

                    b.Property<string>("driver_emailaddress")
                        .HasColumnType("longtext");

                    b.Property<string>("driver_gender")
                        .HasColumnType("longtext");

                    b.Property<string>("driver_idno")
                        .HasColumnType("longtext");

                    b.Property<string>("driver_image")
                        .HasColumnType("longtext");

                    b.Property<string>("driver_name")
                        .HasColumnType("longtext");

                    b.Property<string>("driver_nationality")
                        .HasColumnType("longtext");

                    b.Property<string>("driver_physcaldescription")
                        .HasColumnType("longtext");

                    b.Property<string>("driver_postaladdress")
                        .HasColumnType("longtext");

                    b.Property<string>("driver_pysicaladdress")
                        .HasColumnType("longtext");

                    b.Property<string>("driver_race")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("driver_regdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("driver_town")
                        .HasColumnType("longtext");

                    b.Property<string>("license_no")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("KenloadV2API.Models.EACAct", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("act")
                        .HasColumnType("longtext");

                    b.Property<double>("axlefee")
                        .HasColumnType("double");

                    b.Property<string>("casedocid")
                        .HasColumnType("longtext");

                    b.Property<string>("caseid")
                        .HasColumnType("longtext");

                    b.Property<int>("cdemeritspoints")
                        .HasColumnType("int");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("demeritspoints")
                        .HasColumnType("int");

                    b.Property<double>("dollarrate")
                        .HasColumnType("double");

                    b.Property<double>("gvwfee")
                        .HasColumnType("double");

                    b.Property<string>("penalties")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("EACAct");
                });

            modelBuilder.Entity("KenloadV2API.Models.Events", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("confirmed")
                        .HasColumnType("int");

                    b.Property<string>("confirmedby")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("desc")
                        .HasColumnType("longtext");

                    b.Property<string>("events")
                        .HasColumnType("longtext");

                    b.Property<string>("userid")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("KenloadV2API.Models.GVWdemeritPoints", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("category")
                        .HasColumnType("int");

                    b.Property<int>("point")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("GVWdemeritPoints");
                });

            modelBuilder.Entity("KenloadV2API.Models.GVWoverloadCharges", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("fee")
                        .HasColumnType("double");

                    b.Property<int>("overloadkg")
                        .HasColumnType("int");

                    b.Property<string>("period")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("GVWoverloadCharges");
                });

            modelBuilder.Entity("KenloadV2API.Models.HealthCheck", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("deletestatus")
                        .HasColumnType("int");

                    b.Property<string>("ipaddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("lastchecked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("message")
                        .HasColumnType("longtext");

                    b.Property<string>("station")
                        .HasColumnType("longtext");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("sysname")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("uptime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("userid")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("HealthCheck");
                });

            modelBuilder.Entity("KenloadV2API.Models.Hswim", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MyProperty")
                        .HasColumnType("int");

                    b.Property<string>("anpr")
                        .HasColumnType("longtext");

                    b.Property<string>("anprassist")
                        .HasColumnType("longtext");

                    b.Property<string>("anprassistreason")
                        .HasColumnType("longtext");

                    b.Property<bool>("anprchecked")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("avw")
                        .HasColumnType("double");

                    b.Property<double>("axle1")
                        .HasColumnType("double");

                    b.Property<double>("axle2")
                        .HasColumnType("double");

                    b.Property<double>("axle3")
                        .HasColumnType("double");

                    b.Property<double>("axle4")
                        .HasColumnType("double");

                    b.Property<double>("axle5")
                        .HasColumnType("double");

                    b.Property<double>("axle6")
                        .HasColumnType("double");

                    b.Property<double>("axle7")
                        .HasColumnType("double");

                    b.Property<double>("axle8")
                        .HasColumnType("double");

                    b.Property<string>("axleconfig")
                        .HasColumnType("longtext");

                    b.Property<string>("axles")
                        .HasColumnType("longtext");

                    b.Property<bool>("calledin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("calledinreason")
                        .HasColumnType("longtext");

                    b.Property<int>("gap")
                        .HasColumnType("int");

                    b.Property<double>("gvw")
                        .HasColumnType("double");

                    b.Property<int>("hswim_recordserialno")
                        .HasColumnType("int");

                    b.Property<int>("lane")
                        .HasColumnType("int");

                    b.Property<double>("lngth1")
                        .HasColumnType("double");

                    b.Property<double>("lngth2")
                        .HasColumnType("double");

                    b.Property<double>("lngth3")
                        .HasColumnType("double");

                    b.Property<double>("lngth4")
                        .HasColumnType("double");

                    b.Property<double>("lngth5")
                        .HasColumnType("double");

                    b.Property<double>("lngth6")
                        .HasColumnType("double");

                    b.Property<double>("lngth7")
                        .HasColumnType("double");

                    b.Property<double>("lngth8")
                        .HasColumnType("double");

                    b.Property<double>("perm1")
                        .HasColumnType("double");

                    b.Property<double>("perm2")
                        .HasColumnType("double");

                    b.Property<double>("perm3")
                        .HasColumnType("double");

                    b.Property<double>("perm4")
                        .HasColumnType("double");

                    b.Property<double>("perm5")
                        .HasColumnType("double");

                    b.Property<double>("perm6")
                        .HasColumnType("double");

                    b.Property<double>("perm7")
                        .HasColumnType("double");

                    b.Property<double>("perm8")
                        .HasColumnType("double");

                    b.Property<double>("pernmissible")
                        .HasColumnType("double");

                    b.Property<double>("speed")
                        .HasColumnType("double");

                    b.Property<string>("station")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<string>("wbrg_ticket_exported")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_no")
                        .HasColumnType("longtext");

                    b.Property<bool>("wimtagedcheck")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("wimtagged")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("wintagreason")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Hswim");
                });

            modelBuilder.Entity("KenloadV2API.Models.IOSettings", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<bool>("WIM")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("deckEntry")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("deckExit")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("IOSettings");
                });

            modelBuilder.Entity("KenloadV2API.Models.ManualWeighing", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("deletestatus")
                        .HasColumnType("int");

                    b.Property<string>("hour")
                        .HasColumnType("longtext");

                    b.Property<string>("station")
                        .HasColumnType("longtext");

                    b.Property<int>("tickets")
                        .HasColumnType("int");

                    b.Property<string>("userid")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("ManualWeighing");
                });

            modelBuilder.Entity("KenloadV2API.Models.Origin", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("deletedstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("origin_name")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Origin");
                });

            modelBuilder.Entity("KenloadV2API.Models.Penalties", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("penalties")
                        .HasColumnType("longtext");

                    b.Property<int>("points")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Penalties");
                });

            modelBuilder.Entity("KenloadV2API.Models.PermitURL", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("permiturl")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("PermitURL");
                });

            modelBuilder.Entity("KenloadV2API.Models.ProsecutionSettings", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("alongroad")
                        .HasColumnType("longtext");

                    b.Property<string>("complainant")
                        .HasColumnType("longtext");

                    b.Property<string>("county")
                        .HasColumnType("longtext");

                    b.Property<string>("court")
                        .HasColumnType("longtext");

                    b.Property<string>("district")
                        .HasColumnType("longtext");

                    b.Property<string>("inspector")
                        .HasColumnType("longtext");

                    b.Property<string>("movevehicle")
                        .HasColumnType("longtext");

                    b.Property<string>("police")
                        .HasColumnType("longtext");

                    b.Property<string>("weighbridge")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("ProsecutionSettings");
                });

            modelBuilder.Entity("KenloadV2API.Models.RoadAuthority", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("authority_code")
                        .HasColumnType("longtext");

                    b.Property<string>("authority_name")
                        .HasColumnType("longtext");

                    b.Property<bool>("deletedstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("prefix")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("RoadAuthority");
                });

            modelBuilder.Entity("KenloadV2API.Models.Routes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("deletedstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("route_name")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("KenloadV2API.Models.ScaleTest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("result")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("scaledatetime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("scaledeck1")
                        .HasColumnType("double");

                    b.Property<double>("scaledeck2")
                        .HasColumnType("double");

                    b.Property<double>("scaledeck3")
                        .HasColumnType("double");

                    b.Property<double>("scaledeck4")
                        .HasColumnType("double");

                    b.Property<string>("scaleid")
                        .HasColumnType("longtext");

                    b.Property<string>("scalename")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("scalevehreg")
                        .HasColumnType("longtext");

                    b.Property<string>("scaleweighedby")
                        .HasColumnType("longtext");

                    b.Property<string>("station")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("ScaleTest");
                });

            modelBuilder.Entity("KenloadV2API.Models.Screens", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("active")
                        .HasColumnType("int");

                    b.Property<string>("screen_name")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("KenloadV2API.Models.Shifts", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("deletedstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("position")
                        .HasColumnType("longtext");

                    b.Property<bool>("repeat")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("shift_type")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("KenloadV2API.Models.Source", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("source_code")
                        .HasColumnType("longtext");

                    b.Property<string>("source_deletedstatus")
                        .HasColumnType("longtext");

                    b.Property<string>("source_name")
                        .HasColumnType("longtext");

                    b.Property<string>("source_regdate")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Source");
                });

            modelBuilder.Entity("KenloadV2API.Models.SpecialRelease", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("case_document_id")
                        .HasColumnType("longtext");

                    b.Property<double>("excessload")
                        .HasColumnType("double");

                    b.Property<string>("otherreason")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("realeasedate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("realeasedby")
                        .HasColumnType("longtext");

                    b.Property<string>("reason")
                        .HasColumnType("longtext");

                    b.Property<string>("specialid")
                        .HasColumnType("longtext");

                    b.Property<int>("specialrelease_status")
                        .HasColumnType("int");

                    b.Property<string>("station")
                        .HasColumnType("longtext");

                    b.Property<string>("vehiclereg")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_no")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("SpecialRelease");
                });

            modelBuilder.Entity("KenloadV2API.Models.SystemSettings", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("destination")
                        .HasColumnType("longtext");

                    b.Property<string>("hswim")
                        .HasColumnType("longtext");

                    b.Property<string>("origin")
                        .HasColumnType("longtext");

                    b.Property<string>("stationcode")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("KenloadV2API.Models.Tag", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .HasColumnType("longtext");

                    b.Property<string>("exported")
                        .HasColumnType("longtext");

                    b.Property<string>("reason")
                        .HasColumnType("longtext");

                    b.Property<string>("removedby")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("removeddatetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("removedreason")
                        .HasColumnType("longtext");

                    b.Property<string>("sms")
                        .HasColumnType("longtext");

                    b.Property<string>("station")
                        .HasColumnType("longtext");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("taguid")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.Property<string>("userid")
                        .HasColumnType("longtext");

                    b.Property<string>("vehreg")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("KenloadV2API.Models.TagsExchange", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("station")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("tagid")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("TagsExchange");
                });

            modelBuilder.Entity("KenloadV2API.Models.Tollerance", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("groupaxle")
                        .HasColumnType("double");

                    b.Property<double>("gvw")
                        .HasColumnType("double");

                    b.Property<double>("singleaxle")
                        .HasColumnType("double");

                    b.Property<string>("username")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Tollerance");
                });

            modelBuilder.Entity("KenloadV2API.Models.Trailer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("trailer_code")
                        .HasColumnType("longtext");

                    b.Property<bool>("trailer_deletedstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("trailer_name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("trailer_regdate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("Trailer");
                });

            modelBuilder.Entity("KenloadV2API.Models.Transporters", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("transporter_address")
                        .HasColumnType("longtext");

                    b.Property<string>("transporter_contact")
                        .HasColumnType("longtext");

                    b.Property<string>("transporter_deletedstatus")
                        .HasColumnType("longtext");

                    b.Property<string>("transporter_name")
                        .HasColumnType("longtext");

                    b.Property<string>("transporter_regdate")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Transporters");
                });

            modelBuilder.Entity("KenloadV2API.Models.UserPass", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("expirationstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("userpassword")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("UserPass");
                });

            modelBuilder.Entity("KenloadV2API.Models.UserRoleCombination", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("deletedstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("userrolesid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userrolesid");

                    b.ToTable("UserRoleCombination");
                });

            modelBuilder.Entity("KenloadV2API.Models.UserRoles", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("screens")
                        .HasColumnType("longtext");

                    b.Property<bool>("userrole_deletedstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("userrole_desc")
                        .HasColumnType("longtext");

                    b.Property<string>("userrole_name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("userrole_timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("KenloadV2API.Models.Users", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("UserRole")
                        .HasColumnType("longtext");

                    b.Property<bool>("deletedstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("email")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("fullnames")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("organization")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("phone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("resettime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("sendmail")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("sendsms")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("username")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KenloadV2API.Models.VehicleMake", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("vehiclemake")
                        .HasColumnType("longtext");

                    b.Property<string>("vehiclemake_desc")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("vehiclemake_regdate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("VehicleMake");
                });

            modelBuilder.Entity("KenloadV2API.Models.Vehicles", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("sendmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("sendsms")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("vehicle_axle")
                        .HasColumnType("longtext");

                    b.Property<bool>("vehicle_deletedstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("vehicle_demeritpoints")
                        .HasColumnType("int");

                    b.Property<string>("vehicle_desc")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicle_destination")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicle_driver")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicle_height")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicle_length")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicle_make")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicle_maxweight")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicle_model")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicle_ownercontact")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicle_owneremail")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicle_permit_no")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("vehicle_permitexpiration_date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("vehicle_permitissued_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("vehicle_product")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicle_reg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("vehicle_regdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("vehicle_source")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicle_trailer")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("vehicle_tx_code")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicle_width")
                        .HasColumnType("longtext");

                    b.Property<string>("vehicle_year")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("KenloadV2API.Models.VehiclesInYard", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("case_id")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("entry_date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("released")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("request")
                        .HasColumnType("longtext");

                    b.Property<string>("specialrelease")
                        .HasColumnType("longtext");

                    b.Property<string>("specialrelease_no")
                        .HasColumnType("longtext");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.Property<string>("wbrg_name")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_yard")
                        .HasColumnType("longtext");

                    b.Property<string>("yard_reg")
                        .HasColumnType("longtext");

                    b.Property<string>("yard_status")
                        .HasColumnType("longtext");

                    b.Property<string>("yard_timeout")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("VehiclesInYard");
                });

            modelBuilder.Entity("KenloadV2API.Models.VirtualTicket", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AVW")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_1")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_2")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_3")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_4")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_5")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_6")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_7")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_8")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_9")
                        .HasColumnType("int");

                    b.Property<int>("GVW")
                        .HasColumnType("int");

                    b.Property<string>("anprassist")
                        .HasColumnType("longtext");

                    b.Property<int>("axle_1_leftside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_1_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_1_rightside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_2_leftside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_2_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_2_rightside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_3_leftside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_3_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_3_rightside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_4_leftside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_4_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_4_rightside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_5_leftside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_5_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_5_rightside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_6_leftside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_6_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_6_rightside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_7_leftside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_7_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_7_rightside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_8_leftside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_8_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_8_rightside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_9_leftside_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_9_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_9_rightside_load")
                        .HasColumnType("int");

                    b.Property<string>("axle_conf")
                        .HasColumnType("longtext");

                    b.Property<int>("axle_overload_no")
                        .HasColumnType("int");

                    b.Property<int>("axles_count")
                        .HasColumnType("int");

                    b.Property<int>("calledin")
                        .HasColumnType("int");

                    b.Property<string>("calledinreason")
                        .HasColumnType("longtext");

                    b.Property<string>("car_layout")
                        .HasColumnType("longtext");

                    b.Property<int>("cid")
                        .HasColumnType("int");

                    b.Property<DateTime>("date_time_local")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("dual_tire")
                        .HasColumnType("longtext");

                    b.Property<int>("exported")
                        .HasColumnType("int");

                    b.Property<int>("gap")
                        .HasColumnType("int");

                    b.Property<DateTime>("insert_timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("length")
                        .HasColumnType("int");

                    b.Property<string>("lp")
                        .HasColumnType("longtext");

                    b.Property<string>("lp_back")
                        .HasColumnType("longtext");

                    b.Property<string>("lp_image_back")
                        .HasColumnType("longtext");

                    b.Property<string>("lp_image_front")
                        .HasColumnType("longtext");

                    b.Property<string>("overview")
                        .HasColumnType("longtext");

                    b.Property<string>("overweighting")
                        .HasColumnType("longtext");

                    b.Property<int>("permissible")
                        .HasColumnType("int");

                    b.Property<int>("tagged")
                        .HasColumnType("int");

                    b.Property<int>("total_weight")
                        .HasColumnType("int");

                    b.Property<int>("vehicle_class")
                        .HasColumnType("int");

                    b.Property<int>("velocity")
                        .HasColumnType("int");

                    b.Property<string>("wbrg_ticket_no")
                        .HasColumnType("longtext");

                    b.Property<string>("wim")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("VirtualTicket");
                });

            modelBuilder.Entity("KenloadV2API.Models.WeighbridgeTransactions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("VehiclesInYardid")
                        .HasColumnType("int");

                    b.Property<string>("anpr_veh_reg")
                        .HasColumnType("longtext");

                    b.Property<string>("axle1_group_type1")
                        .HasColumnType("longtext");

                    b.Property<string>("axle1_group_type2")
                        .HasColumnType("longtext");

                    b.Property<double>("axle1_limit")
                        .HasColumnType("double");

                    b.Property<DateTime?>("axle1_time")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("axle1_weight")
                        .HasColumnType("double");

                    b.Property<string>("axle2_group_type1")
                        .HasColumnType("longtext");

                    b.Property<string>("axle2_group_type2")
                        .HasColumnType("longtext");

                    b.Property<double>("axle2_limit")
                        .HasColumnType("double");

                    b.Property<DateTime?>("axle2_time")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("axle2_weight")
                        .HasColumnType("double");

                    b.Property<string>("axle3_group_type1")
                        .HasColumnType("longtext");

                    b.Property<string>("axle3_group_type2")
                        .HasColumnType("longtext");

                    b.Property<double>("axle3_limit")
                        .HasColumnType("double");

                    b.Property<DateTime?>("axle3_time")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("axle3_weight")
                        .HasColumnType("double");

                    b.Property<string>("axle4_group_type1")
                        .HasColumnType("longtext");

                    b.Property<string>("axle4_group_type2")
                        .HasColumnType("longtext");

                    b.Property<double>("axle4_limit")
                        .HasColumnType("double");

                    b.Property<DateTime?>("axle4_time")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("axle4_weight")
                        .HasColumnType("double");

                    b.Property<string>("axle5_group_type1")
                        .HasColumnType("longtext");

                    b.Property<string>("axle5_group_type2")
                        .HasColumnType("longtext");

                    b.Property<double>("axle5_limit")
                        .HasColumnType("double");

                    b.Property<DateTime?>("axle5_time")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("axle5_weight")
                        .HasColumnType("double");

                    b.Property<string>("axle6_group_type1")
                        .HasColumnType("longtext");

                    b.Property<string>("axle6_group_type2")
                        .HasColumnType("longtext");

                    b.Property<double>("axle6_limit")
                        .HasColumnType("double");

                    b.Property<DateTime?>("axle6_time")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("axle6_weight")
                        .HasColumnType("double");

                    b.Property<string>("axle7_group_type1")
                        .HasColumnType("longtext");

                    b.Property<string>("axle7_group_type2")
                        .HasColumnType("longtext");

                    b.Property<double>("axle7_limit")
                        .HasColumnType("double");

                    b.Property<DateTime?>("axle7_time")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("axle7_weight")
                        .HasColumnType("double");

                    b.Property<string>("axle8_group_type1")
                        .HasColumnType("longtext");

                    b.Property<string>("axle8_group_type2")
                        .HasColumnType("longtext");

                    b.Property<double>("axle8_limit")
                        .HasColumnType("double");

                    b.Property<DateTime?>("axle8_time")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("axle8_weight")
                        .HasColumnType("double");

                    b.Property<int>("exported")
                        .HasColumnType("int");

                    b.Property<string>("permit_no")
                        .HasColumnType("longtext");

                    b.Property<string>("reliefvehreg")
                        .HasColumnType("longtext");

                    b.Property<string>("veh_reg")
                        .HasColumnType("longtext");

                    b.Property<string>("wbgr_ticket_trailer_no")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_product")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_roadauthority")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_station")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_axel")
                        .HasColumnType("longtext");

                    b.Property<double>("wbrg_ticket_axleload")
                        .HasColumnType("double");

                    b.Property<string>("wbrg_ticket_case_id")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_charge_no")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("wbrg_ticket_date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("wbrg_ticket_dateout")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("wbrg_ticket_destination")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_direction")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_directionarea")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_driver")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_excessload")
                        .HasColumnType("longtext");

                    b.Property<double>("wbrg_ticket_excessweight")
                        .HasColumnType("double");

                    b.Property<double>("wbrg_ticket_grossweight")
                        .HasColumnType("double");

                    b.Property<double>("wbrg_ticket_gvwload")
                        .HasColumnType("double");

                    b.Property<string>("wbrg_ticket_make")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_no")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_notes")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_operator")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_printed")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_ref")
                        .HasColumnType("longtext");

                    b.Property<int>("wbrg_ticket_reweigh_no")
                        .HasColumnType("int");

                    b.Property<string>("wbrg_ticket_shift")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_source")
                        .HasColumnType("longtext");

                    b.Property<double>("wbrg_ticket_stamp")
                        .HasColumnType("double");

                    b.Property<string>("wbrg_ticket_state")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_status")
                        .HasColumnType("longtext");

                    b.Property<int>("wbrg_ticket_tagged")
                        .HasColumnType("int");

                    b.Property<double>("wbrg_ticket_tareweight")
                        .HasColumnType("double");

                    b.Property<string>("wbrg_ticket_type")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_weighbridge")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_ticket_wim")
                        .HasColumnType("longtext");

                    b.Property<string>("wbrg_tx_code")
                        .HasColumnType("longtext");

                    b.Property<int>("yardlistid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("VehiclesInYardid");

                    b.ToTable("WeighbridgeTransactions");
                });

            modelBuilder.Entity("KenloadV2API.Models.WideLoad", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AODefects")
                        .HasColumnType("longtext");

                    b.Property<string>("AbnormalLPermit")
                        .HasColumnType("longtext");

                    b.Property<double>("AmountPaid")
                        .HasColumnType("double");

                    b.Property<double>("Authweight")
                        .HasColumnType("double");

                    b.Property<string>("Axleconf")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateofTravel")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Dlicensestate")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Dpermitissu")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DrunkDriver")
                        .HasColumnType("longtext");

                    b.Property<string>("FHBreak")
                        .HasColumnType("longtext");

                    b.Property<string>("Fireext")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstAkit")
                        .HasColumnType("longtext");

                    b.Property<string>("Insecureload")
                        .HasColumnType("longtext");

                    b.Property<string>("Inspstick")
                        .HasColumnType("longtext");

                    b.Property<string>("InsuaranceStic")
                        .HasColumnType("longtext");

                    b.Property<string>("Lightstatus")
                        .HasColumnType("longtext");

                    b.Property<string>("Loaddisc")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PEndD")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PStartD")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Sterringdef")
                        .HasColumnType("longtext");

                    b.Property<int>("Totaltyres")
                        .HasColumnType("int");

                    b.Property<int>("deletestatus")
                        .HasColumnType("int");

                    b.Property<string>("destination")
                        .HasColumnType("longtext");

                    b.Property<double>("height_")
                        .HasColumnType("double");

                    b.Property<double>("length_")
                        .HasColumnType("double");

                    b.Property<string>("model")
                        .HasColumnType("longtext");

                    b.Property<int>("nonperconf")
                        .HasColumnType("int");

                    b.Property<string>("origin")
                        .HasColumnType("longtext");

                    b.Property<int>("perconf")
                        .HasColumnType("int");

                    b.Property<DateTime>("permitdatetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("permitid")
                        .HasColumnType("longtext");

                    b.Property<string>("permitno")
                        .HasColumnType("longtext");

                    b.Property<string>("registration")
                        .HasColumnType("longtext");

                    b.Property<string>("remarks")
                        .HasColumnType("longtext");

                    b.Property<string>("station")
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.Property<string>("traillerreg")
                        .HasColumnType("longtext");

                    b.Property<string>("transp")
                        .HasColumnType("longtext");

                    b.Property<string>("transpadd")
                        .HasColumnType("longtext");

                    b.Property<string>("transptel")
                        .HasColumnType("longtext");

                    b.Property<double>("weighofload")
                        .HasColumnType("double");

                    b.Property<double>("width_")
                        .HasColumnType("double");

                    b.HasKey("id");

                    b.ToTable("WideLoad");
                });

            modelBuilder.Entity("KenloadV2API.Models.Wim", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AVW")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_1")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_2")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_3")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_4")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_5")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_6")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_7")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_8")
                        .HasColumnType("int");

                    b.Property<int>("Axl_Legal_Weight_9")
                        .HasColumnType("int");

                    b.Property<int>("GVW")
                        .HasColumnType("int");

                    b.Property<string>("anprassist")
                        .HasColumnType("longtext");

                    b.Property<int>("axle_1_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_2_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_3_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_4_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_5_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_6_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_7_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_8_load")
                        .HasColumnType("int");

                    b.Property<int>("axle_9_load")
                        .HasColumnType("int");

                    b.Property<string>("axle_conf")
                        .HasColumnType("longtext");

                    b.Property<int>("axles_count")
                        .HasColumnType("int");

                    b.Property<int>("calledin")
                        .HasColumnType("int");

                    b.Property<string>("calledinreason")
                        .HasColumnType("longtext");

                    b.Property<string>("car_layout")
                        .HasColumnType("longtext");

                    b.Property<int>("cid")
                        .HasColumnType("int");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("dual_tire")
                        .HasColumnType("longtext");

                    b.Property<int>("gap")
                        .HasColumnType("int");

                    b.Property<int>("length")
                        .HasColumnType("int");

                    b.Property<string>("lp")
                        .HasColumnType("longtext");

                    b.Property<string>("lp_back")
                        .HasColumnType("longtext");

                    b.Property<string>("overweighting")
                        .HasColumnType("longtext");

                    b.Property<int>("permissible")
                        .HasColumnType("int");

                    b.Property<int>("tagged")
                        .HasColumnType("int");

                    b.Property<int>("total_weight")
                        .HasColumnType("int");

                    b.Property<int>("vehicle_class")
                        .HasColumnType("int");

                    b.Property<int>("velocity")
                        .HasColumnType("int");

                    b.Property<string>("wim")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Wim");
                });

            modelBuilder.Entity("KenloadV2API.Models.YardInspection", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AODefects")
                        .HasColumnType("longtext");

                    b.Property<string>("AbnormalLPermit")
                        .HasColumnType("longtext");

                    b.Property<double>("Authweight")
                        .HasColumnType("double");

                    b.Property<string>("Axleconf")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateofTravel")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Dlicensestate")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Dpermitissu")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DrunkDriver")
                        .HasColumnType("longtext");

                    b.Property<string>("FHBreak")
                        .HasColumnType("longtext");

                    b.Property<string>("Fireext")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstAkit")
                        .HasColumnType("longtext");

                    b.Property<string>("Insecureload")
                        .HasColumnType("longtext");

                    b.Property<string>("Inspstick")
                        .HasColumnType("longtext");

                    b.Property<string>("InsuaranceStic")
                        .HasColumnType("longtext");

                    b.Property<string>("Lightstatus")
                        .HasColumnType("longtext");

                    b.Property<string>("Loaddisc")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PEndD")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PStartD")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SteeringBP")
                        .HasColumnType("longtext");

                    b.Property<string>("SteeringOL")
                        .HasColumnType("longtext");

                    b.Property<string>("Sterringdef")
                        .HasColumnType("longtext");

                    b.Property<int>("Totaltyres")
                        .HasColumnType("int");

                    b.Property<string>("balljoints")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("deletestatus")
                        .HasColumnType("int");

                    b.Property<string>("destination")
                        .HasColumnType("longtext");

                    b.Property<double>("height_")
                        .HasColumnType("double");

                    b.Property<string>("inspectionid")
                        .HasColumnType("longtext");

                    b.Property<double>("length_")
                        .HasColumnType("double");

                    b.Property<string>("model")
                        .HasColumnType("longtext");

                    b.Property<int>("nonperconf")
                        .HasColumnType("int");

                    b.Property<string>("origin")
                        .HasColumnType("longtext");

                    b.Property<int>("perconf")
                        .HasColumnType("int");

                    b.Property<string>("registration")
                        .HasColumnType("longtext");

                    b.Property<string>("remarks")
                        .HasColumnType("longtext");

                    b.Property<string>("rodend")
                        .HasColumnType("longtext");

                    b.Property<string>("station")
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.Property<string>("ticketno")
                        .HasColumnType("longtext");

                    b.Property<string>("traillerreg")
                        .HasColumnType("longtext");

                    b.Property<string>("transp")
                        .HasColumnType("longtext");

                    b.Property<string>("transpadd")
                        .HasColumnType("longtext");

                    b.Property<string>("transptel")
                        .HasColumnType("longtext");

                    b.Property<double>("weighofload")
                        .HasColumnType("double");

                    b.Property<string>("wheelallignment")
                        .HasColumnType("longtext");

                    b.Property<double>("width_")
                        .HasColumnType("double");

                    b.HasKey("id");

                    b.ToTable("YardInspection");
                });

            modelBuilder.Entity("KenloadV2API.Models.YardList", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("WeighbridgeTransactionsid")
                        .HasColumnType("int");

                    b.Property<string>("caseid")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("inspected")
                        .HasColumnType("int");

                    b.Property<string>("specialrelease")
                        .HasColumnType("longtext");

                    b.Property<string>("spreleaseno")
                        .HasColumnType("longtext");

                    b.Property<string>("station")
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.Property<string>("userid")
                        .HasColumnType("longtext");

                    b.Property<string>("vehreg")
                        .HasColumnType("longtext");

                    b.Property<string>("wbtno")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("yardtimeout")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("WeighbridgeTransactionsid");

                    b.ToTable("YardList");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("KenloadV2API.Models.BillingInstruction", b =>
                {
                    b.HasOne("KenloadV2API.Models.CaseDetails", null)
                        .WithMany("billinginstruction")
                        .HasForeignKey("casedetailsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KenloadV2API.Models.CaseDocs", b =>
                {
                    b.HasOne("KenloadV2API.Models.CaseDetails", null)
                        .WithMany("casedocs")
                        .HasForeignKey("casedetailsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KenloadV2API.Models.CaseResults", b =>
                {
                    b.HasOne("KenloadV2API.Models.CaseDetails", null)
                        .WithMany("caseresults")
                        .HasForeignKey("casedetailsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KenloadV2API.Models.UserRoleCombination", b =>
                {
                    b.HasOne("KenloadV2API.Models.UserRoles", "userroles")
                        .WithMany()
                        .HasForeignKey("userrolesid");

                    b.Navigation("userroles");
                });

            modelBuilder.Entity("KenloadV2API.Models.WeighbridgeTransactions", b =>
                {
                    b.HasOne("KenloadV2API.Models.VehiclesInYard", null)
                        .WithMany("wbrg_tickt_no")
                        .HasForeignKey("VehiclesInYardid");
                });

            modelBuilder.Entity("KenloadV2API.Models.YardList", b =>
                {
                    b.HasOne("KenloadV2API.Models.WeighbridgeTransactions", null)
                        .WithMany("yardList")
                        .HasForeignKey("WeighbridgeTransactionsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KenloadV2API.Models.CaseDetails", b =>
                {
                    b.Navigation("billinginstruction");

                    b.Navigation("casedocs");

                    b.Navigation("caseresults");
                });

            modelBuilder.Entity("KenloadV2API.Models.VehiclesInYard", b =>
                {
                    b.Navigation("wbrg_tickt_no");
                });

            modelBuilder.Entity("KenloadV2API.Models.WeighbridgeTransactions", b =>
                {
                    b.Navigation("yardList");
                });
#pragma warning restore 612, 618
        }
    }
}
